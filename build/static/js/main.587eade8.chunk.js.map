{"version":3,"sources":["components/Input.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Input","setInputText","inputText","todos","setTodos","setStatus","type","className","value","onChange","e","target","onClick","preventDefault","id","Math","floor","random","text","completed","date","Date","name","console","log","Todo","todo","filteredTodos","map","el","filter","ToDoList","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.587eade8.chunk.js","sourcesContent":["import React from 'react'\n\n//?setInputText is passed as a prop from App.js so this file can access it.\n\nfunction Input({ setInputText, inputText, todos, setTodos, setStatus }) {\n\n\n  //?Function to handle the users Input. \n\n  const InputTextHandler = (e) => {\n    setInputText(e.target.value)\n  }\n  //? Function to hadle the submission of the todo on click.\n\n  const SubmitTodoHandler = (e) => {\n    //? e.prevent stops form submitting and clearing data\n    e.preventDefault()\n    //? update todo array by spreading existing todos and then add any new todos as an Object. \n    setTodos([...todos,\n    {\n      id: Math.floor(Math.random() * 100),\n      text: inputText,\n      completed: false,\n      date: new Date(),\n    }\n    ])\n    //?set the input text back to an empty string on submit.requires a value to be attached the the input set to inputText\n    setInputText(\"\");\n  }\n\n  const StatusHandler = (e) => {\n    console.log(e.target.value)\n    setStatus(e.target.value)\n  }\n\n  return (\n    <form>\n      {/*//?add a value attribute of {inputText} which is an empty string so that the UI also updates on submit*/}.\n      <input\n        type=\"text\"\n        className=\"todo-input\"\n        value={inputText}\n        onChange={InputTextHandler}>\n      </input>\n      <button\n        onClick={SubmitTodoHandler}\n        type=\"submit\"\n        className=\"todo-btn\">\n        âž•\n      </button>\n      <div className=\"select\">\n        <select\n          name=\"todos\"\n          className=\"filter-todo\"\n          onChange={StatusHandler}>\n          <option value=\"all\">All</option>\n          <option value=\"complete\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form >\n  )\n}\n\nexport default Input","import React from 'react'\n\n//? {text} is deconstructed from the todo object which is passed down from the todo list component where I mapped over the todos array of objects.\n\n//? Todo props recieved from todoList component.\n\nfunction Todo({ text, todo, setTodos, id, filteredTodos, date }) {\n\n  //? filter throug the todos and return all todos that do not match the elmement(el) id clicked on.\n\n  const DeleteHandler = () => {\n    setTodos(filteredTodos.filter((el) => el.id !== todo.id))\n  }\n\n  //? map ober the todos to access a single todo. If the el id and todo id are the same then retun the todo object with the completed key opposite to what id was set to. Otherwise just return the todos array of objects (el). \n\n  const CompleteHandler = () => {\n    setTodos(filteredTodos.map((el) => {\n      if (el.id === todo.id) {\n        return {\n          ...todo, completed: !todo.completed\n        }\n      }\n      return el;\n    }))\n  }\n\n\n  return (\n    <div className=\"todo\">\n      {/* //?conditionally render the class of li using a ternary expression so that linethroigh is applied if completed === true*/}\n      <li\n        className={`todo-item ${todo.completed ? 'completed' : \"\"}  `}\n        key={id}>\n        {text}\n        {date}\n        <br />\n        <hr />\n      </li>\n      <button className=\"check-btn\" onClick={CompleteHandler}> âœ… </button>\n      <button className=\"trash-btn\" onClick={DeleteHandler}> ðŸ—‘ </button>\n    </div>\n  )\n}\n\nexport default Todo;","import React from 'react'\n\nimport Todo from '../components/Todo'\n\n//? pass todos as a prop and then map over the todos array of objects to return a Todo compoment for each of the todos.\n//? todos are passed down from the App.js Parent component.\n//? props are then passed down from the ( app -> todolist -> todo )\n\n//? Pass todo (line 23) as a prop so that i can access a single todo object and then its id - this is so that when it comes to deleting a todo I can check the elements (el) id against the todos id to filter the todo array\n\nfunction ToDoList({ todos, setTodos, filteredTodos, date }) {\n\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filteredTodos.map((todo) => (\n          <Todo\n            text={todo.text}\n            id={todo.id}\n            setTodos={setTodos}\n            todos={todos}\n            todo={todo}\n            filteredTodos={filteredTodos}\n            date={date}\n          />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default ToDoList\n\n//?Child component of App \n//? Parent component of Todo\n","import React, { useState, useEffect } from 'react'\n\nimport './Styles.css';\n\nimport Input from '../src/components/Input.js';\nimport ToDoList from '../src/components/TodoList'\n\nfunction App() {\n\n  //? set the input text in state starting with an empty string\n  const [inputText, setInputText] = useState(\"\")\n  //? set todos in state, which is an empty array of objects\n  const [todos, setTodos] = useState([])\n  //? setStatus of select dropdown in state so that i can filter based on the the options value which is delared in input.js\n  const [status, setStatus] = useState('all')\n  //? create state for filtering options based on the values attached the the select options\n  const [filteredTodos, setFilteredTodos] = useState([])\n\n  //? useEffect to get todos saved in local storge on first mount and render as setTodos state.\n\n  useEffect(() => {\n    getLocalTodos()\n  }, [])\n\n  //? useEffect to run filter function and update state when todos change and the status - all, complete, uncompleted.\n\n  //?Linter Error caused by calling a function filterhandler in use effect instead of writing the function in the useEffect block. \n\n  useEffect(() => {\n    filterHandler()\n    saveLocalTodos()\n  }, [todos, status])\n\n  //? creating a function to handle the select drop down and filter according to the status - option-value. \n\n  // const filterHandler = () => {\n  //   switch (status) {\n  //     case 'complete':\n  //       setFilteredTodos(todos.filter(todo => todo.completed === true))\n  //       break;\n  //     case 'uncompleted':\n  //       setFilteredTodos(todos.filter(todo => todo.completed === false))\n  //       break;\n  //     default:\n  //       setFilteredTodos(todos)\n  //       break;\n  //   }\n  // }\n\n  //? if statement as an alterative to the switch statement above for practice. needs work on the completed filter functionality... \n  //? set filtered todso in state as an empty array. \n  //? add the conditions to check against and then return the filtered todos based on the 'status' and boolean completed.\n\n  const filterHandler = () => {\n\n    if (status === 'uncompleted') {\n      setFilteredTodos(todos.filter(todo => todo.completed === false))\n    }\n    if (status === 'complete') {\n      setFilteredTodos(todos.filter(todo => todo.completed === true))\n    }\n    if (status === 'all') {\n      setFilteredTodos(todos)\n    }\n  }\n\n  //? save the todo to local storage for access after page refresh.\n\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }\n\n  //? get the todos save in local storgae. \n  //? check to see if todos are already in localstorage, if not then set todos to an empty array and stringify for storage. \n  //? if there are todos then parse them from json and setTodos in state. \n\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem('todos'));\n      setTodos(todoLocal)\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>My Todo List</h1>\n      </header>\n      <main>\n        <Input\n          setInputText={setInputText}\n          inputText={inputText}\n          setTodos={setTodos}\n          todos={todos}\n          setStatus={setStatus}\n          status={status}\n        />\n\n        <ToDoList\n          todos={todos}\n          setTodos={setTodos}\n          filteredTodos={filteredTodos}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//? App is the parent component\n//? Input is a child of App\n//? ToDoList is a child of App\n//? Todo is a child of ToDoList\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}